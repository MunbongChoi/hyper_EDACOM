{"version":3,"sources":["components/PageTitle.js","pages/uikit/Dropdowns.js","../node_modules/reactstrap/es/Breadcrumb.js","../node_modules/reactstrap/es/BreadcrumbItem.js","../node_modules/reactstrap/es/ButtonDropdown.js","../node_modules/reactstrap/es/UncontrolledButtonDropdown.js"],"names":["PageTitle","props","className","to","breadCrumbItems","map","item","index","active","key","label","path","title","colors","name","color","SingleButtonDropdown","caret","header","disabled","divider","ColorVariantButtonDropdown","Fragment","SplitColorVariantButtonDropdown","direction","ButtonDropdownSizes","size","VariantButtonDropdowns","ModifiersButtonDropdowns","modifiers","setMaxHeight","enabled","order","fn","data","styles","overflow","maxHeight","Dropdowns","lg","propTypes","tag","tagPropType","listTag","PropTypes","string","listClassName","cssModule","object","children","node","Breadcrumb","Tag","ListTag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","listClasses","React","createElement","_extends","defaultProps","bool","BreadcrumbItem","undefined","ButtonDropdown","Dropdown","group","ownKeys","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","omitKeys","UncontrolledButtonDropdown","_Component","_this","call","this","state","isOpen","defaultOpen","toggle","bind","_assertThisInitialized","_inheritsLoose","_proto","prototype","setState","render","omit","Component","target","i","arguments","length","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_objectSpread"],"mappings":"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","file":"static/js/85.bad5d7d4.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\ntype PageTitleProps = {\n    breadCrumbItems: PropTypes.object,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps) => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb>\n                            <BreadcrumbItem>\n                                <Link to=\"/\">Hyper</Link>\n                            </BreadcrumbItem>\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <BreadcrumbItem active key={index}>\n                                        {item.label}\n                                    </BreadcrumbItem>\n                                ) : (\n                                    <BreadcrumbItem key={index}>\n                                        <Link to={item.path}>{item.label}</Link>\n                                    </BreadcrumbItem>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","// @flow\nimport React from 'react';\nimport {\n    Row,\n    Col,\n    Card,\n    CardBody,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    UncontrolledButtonDropdown,\n    Button,\n} from 'reactstrap';\n\nimport PageTitle from '../../components/PageTitle';\n\nconst colors = [\n    {\n        name: 'Primary',\n        color: 'primary',\n    },\n    {\n        name: 'Secondary',\n        color: 'secondary',\n    },\n    {\n        name: 'Success',\n        color: 'success',\n    },\n    {\n        name: 'Danger',\n        color: 'danger',\n    },\n    {\n        name: 'Warning',\n        color: 'warning',\n    },\n    {\n        name: 'Info',\n        color: 'info',\n    },\n    {\n        name: 'Dark',\n        color: 'dark',\n    },\n];\n\nconst SingleButtonDropdown = () => {\n    return (\n        <Card>\n            <CardBody>\n                <h4 className=\"header-title\">Single button dropdowns</h4>\n                <p className=\"text-muted font-14\">\n                    You can use <code>UncontrolledButtonDropdown</code> to create a simple dropdown\n                </p>\n\n                {/* simple */}\n                <UncontrolledButtonDropdown>\n                    <DropdownToggle color=\"light\" caret>\n                        Dropdown\n                    </DropdownToggle>\n                    <DropdownMenu>\n                        <DropdownItem header>Header</DropdownItem>\n                        <DropdownItem disabled>Action</DropdownItem>\n                        <DropdownItem>Another Action</DropdownItem>\n                        <DropdownItem divider />\n                        <DropdownItem>Another Action</DropdownItem>\n                    </DropdownMenu>\n                </UncontrolledButtonDropdown>\n\n                {/* animated */}\n                <UncontrolledButtonDropdown className=\"ml-5\">\n                    <DropdownToggle color=\"secondary\" caret>\n                        Animated Dropdown\n                    </DropdownToggle>\n                    <DropdownMenu className=\"dropdown-menu-animated\">\n                        <DropdownItem header>Header</DropdownItem>\n                        <DropdownItem disabled>Action</DropdownItem>\n                        <DropdownItem>Another Action</DropdownItem>\n                        <DropdownItem divider />\n                        <DropdownItem>Another Action</DropdownItem>\n                    </DropdownMenu>\n                </UncontrolledButtonDropdown>\n            </CardBody>\n        </Card>\n    );\n};\n\nconst ColorVariantButtonDropdown = () => {\n    return (\n        <React.Fragment>\n            <Card>\n                <CardBody>\n                    <h4 className=\"header-title\">Variant</h4>\n                    <p className=\"text-muted font-14 mb-3\">\n                        The best part is you can do this with any button variant, too:\n                    </p>\n\n                    {colors.map((color, index) => {\n                        return (\n                            <UncontrolledButtonDropdown key={index} className=\"mr-1\">\n                                <DropdownToggle caret color={color.color}>\n                                    {color.name}\n                                </DropdownToggle>\n                                <DropdownMenu>\n                                    <DropdownItem header>Header</DropdownItem>\n                                    <DropdownItem disabled>Action</DropdownItem>\n                                    <DropdownItem>Another Action</DropdownItem>\n                                    <DropdownItem divider />\n                                    <DropdownItem>Another Action</DropdownItem>\n                                </DropdownMenu>\n                            </UncontrolledButtonDropdown>\n                        );\n                    })}\n                </CardBody>\n            </Card>\n        </React.Fragment>\n    );\n};\n\nconst SplitColorVariantButtonDropdown = () => {\n    return (\n        <React.Fragment>\n            <Card>\n                <CardBody>\n                    <h4 className=\"header-title\">Split button dropdowns</h4>\n                    <p className=\"text-muted font-14 mb-3\">\n                        You can split button dropdowns by adding <code>toggle</code> and <code>Button</code> together.\n                    </p>\n\n                    {colors.map((color, index) => {\n                        return (\n                            <UncontrolledButtonDropdown direction=\"down\" key={index} className=\"mr-1 mb-1\">\n                                <Button color={color.color}>{color.name}</Button>\n                                <DropdownToggle caret color={color.color}></DropdownToggle>\n                                <DropdownMenu>\n                                    <DropdownItem header>Header</DropdownItem>\n                                    <DropdownItem disabled>Action</DropdownItem>\n                                    <DropdownItem>Another Action</DropdownItem>\n                                    <DropdownItem divider />\n                                    <DropdownItem>Another Action</DropdownItem>\n                                </DropdownMenu>\n                            </UncontrolledButtonDropdown>\n                        );\n                    })}\n                </CardBody>\n            </Card>\n        </React.Fragment>\n    );\n};\n\nconst ButtonDropdownSizes = () => {\n    return (\n        <React.Fragment>\n            <Card>\n                <CardBody>\n                    <h4 className=\"header-title\">Sizing</h4>\n                    <p className=\"text-muted font-14\">\n                        Button dropdowns work with buttons of all sizes, including default and split dropdown buttons.\n                    </p>\n\n                    <UncontrolledButtonDropdown size=\"lg\" className=\"mr-2\">\n                        <DropdownToggle color=\"light\" caret>\n                            Large\n                        </DropdownToggle>\n                        <DropdownMenu>\n                            <DropdownItem>Another Action</DropdownItem>\n                            <DropdownItem>Another Action</DropdownItem>\n                        </DropdownMenu>\n                    </UncontrolledButtonDropdown>\n\n                    <UncontrolledButtonDropdown size=\"sm\">\n                        <DropdownToggle color=\"light\" caret>\n                            Small\n                        </DropdownToggle>\n                        <DropdownMenu>\n                            <DropdownItem>Another Action</DropdownItem>\n                            <DropdownItem>Another Action</DropdownItem>\n                        </DropdownMenu>\n                    </UncontrolledButtonDropdown>\n                </CardBody>\n            </Card>\n        </React.Fragment>\n    );\n};\n\nconst VariantButtonDropdowns = () => {\n    return (\n        <React.Fragment>\n            <Card>\n                <CardBody>\n                    <h4 className=\"header-title\">Drop varient</h4>\n\n                    <p className=\"text-muted font-14\">\n                        Trigger dropdown menus at the different direction of the elements by adding{' '}\n                        <code>direction</code> attribute.\n                    </p>\n\n                    <UncontrolledButtonDropdown direction=\"right\">\n                        <DropdownToggle caret>Drop right</DropdownToggle>\n                        <DropdownMenu>\n                            <DropdownItem>Another Action</DropdownItem>\n                            <DropdownItem>Another Action</DropdownItem>\n                        </DropdownMenu>\n                    </UncontrolledButtonDropdown>\n                    {'  '}\n\n                    <UncontrolledButtonDropdown direction=\"up\">\n                        <DropdownToggle caret>Dropup</DropdownToggle>\n                        <DropdownMenu>\n                            <DropdownItem>Another Action</DropdownItem>\n                            <DropdownItem>Another Action</DropdownItem>\n                        </DropdownMenu>\n                    </UncontrolledButtonDropdown>\n                    {'  '}\n\n                    <UncontrolledButtonDropdown direction=\"left\">\n                        <DropdownToggle caret>Drop left</DropdownToggle>\n                        <DropdownMenu>\n                            <DropdownItem>Another Action</DropdownItem>\n                            <DropdownItem>Another Action</DropdownItem>\n                        </DropdownMenu>\n                    </UncontrolledButtonDropdown>\n                </CardBody>\n            </Card>\n        </React.Fragment>\n    );\n};\n\nconst ModifiersButtonDropdowns = () => {\n    return (\n        <React.Fragment>\n            <Card>\n                <CardBody>\n                    <h4 className=\"header-title\">Modifiers</h4>\n\n                    <p className=\"text-muted font-14\">\n                        You can modify the menu rendering by overriding <code>modifiers</code>\n                    </p>\n\n                    <UncontrolledButtonDropdown>\n                        <DropdownToggle caret>Modified Dropdown Menu</DropdownToggle>\n                        <DropdownMenu\n                            modifiers={{\n                                setMaxHeight: {\n                                    enabled: true,\n                                    order: 890,\n                                    fn: data => {\n                                        return {\n                                            ...data,\n                                            styles: {\n                                                ...data.styles,\n                                                overflow: 'auto',\n                                                maxHeight: '100px',\n                                            },\n                                        };\n                                    },\n                                },\n                            }}>\n                            <DropdownItem>Another Action</DropdownItem>\n                            <DropdownItem>Another Action</DropdownItem>\n                            <DropdownItem>Another Action</DropdownItem>\n                            <DropdownItem>Another Action</DropdownItem>\n                            <DropdownItem>Another Action</DropdownItem>\n                            <DropdownItem>Another Action</DropdownItem>\n                            <DropdownItem>Another Action</DropdownItem>\n                            <DropdownItem>Another Action</DropdownItem>\n                            <DropdownItem>Another Action</DropdownItem>\n                            <DropdownItem>Another Action</DropdownItem>\n                        </DropdownMenu>\n                    </UncontrolledButtonDropdown>\n                </CardBody>\n            </Card>\n        </React.Fragment>\n    );\n};\n\nconst Dropdowns = () => {\n    return (\n        <React.Fragment>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'UI', path: '/ui/dropdowns' },\n                    { label: 'Base UI', path: '/ui/dropdowns' },\n                    { label: 'Dropdowns', path: '/ui/dropdowns', active: true },\n                ]}\n                title={'Dropdowns'}\n            />\n\n            <Row>\n                <Col lg={6}>\n                    <SingleButtonDropdown />\n                </Col>\n\n                <Col lg={6}>\n                    <ColorVariantButtonDropdown />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <SplitColorVariantButtonDropdown />\n                </Col>\n                <Col lg={6}>\n                    <ButtonDropdownSizes />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <VariantButtonDropdowns />\n                </Col>\n                <Col lg={6}>\n                    <ModifiersButtonDropdowns />\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default Dropdowns;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  listTag: tagPropType,\n  className: PropTypes.string,\n  listClassName: PropTypes.string,\n  cssModule: PropTypes.object,\n  children: PropTypes.node,\n  'aria-label': PropTypes.string\n};\nvar defaultProps = {\n  tag: 'nav',\n  listTag: 'ol',\n  'aria-label': 'breadcrumb'\n};\n\nvar Breadcrumb = function Breadcrumb(props) {\n  var className = props.className,\n      listClassName = props.listClassName,\n      cssModule = props.cssModule,\n      children = props.children,\n      Tag = props.tag,\n      ListTag = props.listTag,\n      label = props['aria-label'],\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"listClassName\", \"cssModule\", \"children\", \"tag\", \"listTag\", \"aria-label\"]);\n\n  var classes = mapToCssModules(classNames(className), cssModule);\n  var listClasses = mapToCssModules(classNames('breadcrumb', listClassName), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    \"aria-label\": label\n  }), /*#__PURE__*/React.createElement(ListTag, {\n    className: listClasses\n  }, children));\n};\n\nBreadcrumb.propTypes = propTypes;\nBreadcrumb.defaultProps = defaultProps;\nexport default Breadcrumb;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'li'\n};\n\nvar BreadcrumbItem = function BreadcrumbItem(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      active = props.active,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"active\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, active ? 'active' : false, 'breadcrumb-item'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    \"aria-current\": active ? 'page' : undefined\n  }));\n};\n\nBreadcrumbItem.propTypes = propTypes;\nBreadcrumbItem.defaultProps = defaultProps;\nexport default BreadcrumbItem;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nvar propTypes = {\n  children: PropTypes.node\n};\n\nvar ButtonDropdown = function ButtonDropdown(props) {\n  return /*#__PURE__*/React.createElement(Dropdown, _extends({\n    group: true\n  }, props));\n};\n\nButtonDropdown.propTypes = propTypes;\nexport default ButtonDropdown;","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ButtonDropdown from './ButtonDropdown';\nimport { omit } from './utils';\nvar omitKeys = ['defaultOpen'];\n\nvar UncontrolledButtonDropdown = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(UncontrolledButtonDropdown, _Component);\n\n  function UncontrolledButtonDropdown(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      isOpen: props.defaultOpen || false\n    };\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = UncontrolledButtonDropdown.prototype;\n\n  _proto.toggle = function toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  };\n\n  _proto.render = function render() {\n    return /*#__PURE__*/React.createElement(ButtonDropdown, _extends({\n      isOpen: this.state.isOpen,\n      toggle: this.toggle\n    }, omit(this.props, omitKeys)));\n  };\n\n  return UncontrolledButtonDropdown;\n}(Component);\n\nexport { UncontrolledButtonDropdown as default };\nUncontrolledButtonDropdown.propTypes = _objectSpread({\n  defaultOpen: PropTypes.bool\n}, ButtonDropdown.propTypes);"],"sourceRoot":""}